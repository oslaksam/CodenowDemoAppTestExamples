package io.testproject.generated.tests.democreate;

import io.testproject.addon.FileUpload;
import io.testproject.addon.RandomDataGenerator;
import io.testproject.addon.RandomLoginCredentials;
import io.testproject.addon.WebExtensions;
import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;

/**
 * This class was automatically generated by TestProject
 * Project: My first Project
 * Test: DemoAppTest
 * Generated by: Bou Rat (pizdik25@gmail.com)
 * Generated on Fri May 06 10:07:28 GMT 2022.
 */
@DisplayName("DemoAppTest")
public class Demoapptest implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("ey2IXEi3cF1BNXeNL5EknZWPgfdmn0W4v1SH8mpCe8k1", new ChromeOptions(), "Bou Rat");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("DemoAppTest")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL, String randomName, String randomLastName, String randomEmail,
      String alertOutput) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;
    WebExtensions.WaitForAlertPresence waitForAlertPresence;
    RandomDataGenerator.GenerateName generateName;
    RandomLoginCredentials.RandomEmail randomEmail;
    WebExtensions.AcceptAlert acceptAlert;
    RandomDataGenerator.GenerateLastName generateLastName;
    WebExtensions.GetAlertText getAlertText;
    FileUpload.UploadFileElementAction uploadFileElementAction;

    // 1. Navigate to '{{ApplicationURL}}'
    //    Navigates the specified URL (Auto-generated)
    driver.navigate().to(ApplicationURL);

    // 2. Generate random name
    generateName = RandomDataGenerator.getGenerateName();
    generateName = (RandomDataGenerator.GenerateName)((ReportingDriver)driver).addons().execute(generateName);
    randomName = String.valueOf(generateName.result);

    // 3. Generate random last name
    generateLastName = RandomDataGenerator.getGenerateLastName();
    generateLastName = (RandomDataGenerator.GenerateLastName)((ReportingDriver)driver).addons().execute(generateLastName);
    randomLastName = String.valueOf(generateLastName.result);

    // 4. Generate random email address
    randomEmail = RandomLoginCredentials.randomEmail("","",10,true,true,true);
    randomEmail = (RandomLoginCredentials.RandomEmail)((ReportingDriver)driver).addons().execute(randomEmail);
    randomEmail = String.valueOf(randomEmail.emailAddress);

    // 5. Click '2022-04-02'
    by = By.xpath("//div[1]/div/a/span[1]");
    driver.findElement(by).click();

    // 6. Click 'Today'
    by = By.xpath("//span[. = 'Today']");
    driver.findElement(by).click();

    // 7. Click 'trainId'
    by = By.cssSelector("[name='trainId']");
    driver.findElement(by).click();

    // 8. Click 'IC 879 Hamburg'
    by = By.xpath("//a[. = 'IC 879 Hamburg']");
    driver.findElement(by).click();

    // 9. Click 'seatId'
    by = By.cssSelector("[name='seatId']");
    driver.findElement(by).click();

    // 10. Click 'Coach 1 / Seat 10'
    by = By.xpath("//a[. = 'Coach 1 / Seat 10']");
    driver.findElement(by).click();

    // 11. Click 'firstName'
    by = By.cssSelector("[name='firstName']");
    driver.findElement(by).click();

    // 12. Type '{{randomName}}' in 'firstName'
    by = By.cssSelector("[name='firstName']");
    driver.findElement(by).sendKeys(randomName);

    // 13. Click 'lastName'
    by = By.cssSelector("[name='lastName']");
    driver.findElement(by).click();

    // 14. Type '{{randomLastName}}' in 'lastName'
    by = By.cssSelector("[name='lastName']");
    driver.findElement(by).sendKeys(randomLastName);

    // 15. Click 'email'
    by = By.cssSelector("[name='email']");
    driver.findElement(by).click();

    // 16. Type '{{randomEmail}}' in 'email'
    by = By.cssSelector("[name='email']");
    driver.findElement(by).sendKeys(randomEmail);

    // 17. Uploads a file to a given element with the 'file' type
    uploadFileElementAction = FileUpload.uploadFileElementAction("C:\\Users\\oslaksam\\Documents\\CODENOW\\SeleniumDemo\\randomFile.bibtex");
    by = By.cssSelector("[name='file']");
    uploadFileElementAction = (FileUpload.UploadFileElementAction)((ReportingDriver)driver).addons().execute(uploadFileElementAction, by, -1);

    // 18. Click 'Submit'
    by = By.xpath("//button[. = 'Submit']");
    driver.findElement(by).click();

    // 19. Is alert displayed?
    waitForAlertPresence = WebExtensions.waitForAlertPresence(3000);
    waitForAlertPresence = (WebExtensions.WaitForAlertPresence)((ReportingDriver)driver).addons().execute(waitForAlertPresence);

    // 20. Get alert text
    getAlertText = WebExtensions.getGetAlertText();
    getAlertText = (WebExtensions.GetAlertText)((ReportingDriver)driver).addons().execute(getAlertText);
    alertOutput = String.valueOf(getAlertText.text);

    // 21. Accept alert
    //    accept the alert
    acceptAlert = WebExtensions.acceptAlert(0);
    acceptAlert = (WebExtensions.AcceptAlert)((ReportingDriver)driver).addons().execute(acceptAlert);

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://demo-app-fe.vercel.app/","","","",""));
  }
}
